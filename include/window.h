#pragma once

#include "libhtml5.h"
#include "event_target.h"

class ApplicationCache;
class Document;
class External;
class Element;
class WindowProxy;
class History;
class IDBFactory;
class Storage;
class Location;
class BarProp;
class Navigator;
class ImageBitmapSource;
class Promise;
class CSSStyleDeclaration;
class HTMLImageElement;
class HTMLVideoElement;
class HTMLCanvasElement;
class Blob;
class ImageData;
class CanvasRenderingContext2D;
class ImageBitmap;
class Transferable;

class Window : public EventTarget {
public:
    ApplicationCache *_applicationCache;
    bool _closed;
    Document *_document;
    External *_external;
    Element *_frameElement;
    WindowProxy *_frames;
    History *_history;
    IDBFactory *_indexedDB;
    unsigned long _length;
    Storage *_localStorage;
    Location *_location;
    BarProp *_locationbar;
    BarProp *_menubar;
    std::string _name;
    Navigator *_navigator;
    EventHandler *_onabort;
    EventHandler *_onafterprint;
    EventHandler *_onautocomplete;
    EventHandler *_onautocompleteerror;
    EventHandler *_onbeforeprint;
    EventHandler *_onbeforeunload;
    EventHandler *_onblur;
    EventHandler *_oncancel;
    EventHandler *_oncanplay;
    EventHandler *_oncanplaythrough;
    EventHandler *_onchange;
    EventHandler *_onclick;
    EventHandler *_onclose;
    EventHandler *_oncontextmenu;
    EventHandler *_oncuechange;
    EventHandler *_ondblclick;
    EventHandler *_ondrag;
    EventHandler *_ondragend;
    EventHandler *_ondragenter;
    EventHandler *_ondragexit;
    EventHandler *_ondragleave;
    EventHandler *_ondragover;
    EventHandler *_ondragstart;
    EventHandler *_ondrop;
    EventHandler *_ondurationchange;
    EventHandler *_onemptied;
    EventHandler *_onended;
    OnErrorEventHandler *_onerror;
    EventHandler *_onfocus;
    EventHandler *_oninput;
    EventHandler *_oninvalid;
    EventHandler *_onkeydown;
    EventHandler *_onkeypress;
    EventHandler *_onkeyup;
    EventHandler *_onlanguagechange;
    EventHandler *_onload;
    EventHandler *_onloadeddata;
    EventHandler *_onloadedmetadata;
    EventHandler *_onloadstart;
    EventHandler *_onmessage;
    EventHandler *_onmousedown;
    EventHandler *_onmouseenter;
    EventHandler *_onmouseleave;
    EventHandler *_onmousemove;
    EventHandler *_onmouseout;
    EventHandler *_onmouseover;
    EventHandler *_onmouseup;
    EventHandler *_onmousewheel;
    EventHandler *_onoffline;
    EventHandler *_ononline;
    EventHandler *_onpagehide;
    EventHandler *_onpageshow;
    EventHandler *_onpause;
    EventHandler *_onplay;
    EventHandler *_onplaying;
    EventHandler *_onpopstate;
    EventHandler *_onratechange;
    EventHandler *_onreset;
    EventHandler *_onresize;
    EventHandler *_onscroll;
    EventHandler *_onseeked;
    EventHandler *_onseeking;
    EventHandler *_onselect;
    EventHandler *_onshow;
    EventHandler *_onsort;
    EventHandler *_onstalled;
    EventHandler *_onstorage;
    EventHandler *_onsubmit;
    EventHandler *_onsuspend;
    EventHandler *_ontimeupdate;
    EventHandler *_ontoggle;
    EventHandler *_onunload;
    EventHandler *_onvolumechange;
    EventHandler *_onwaiting;
    WindowProxy *_opener;
    WindowProxy *_parent;
    BarProp *_personalbar;
    BarProp *_scrollbars;
    WindowProxy *_self;
    Storage *_sessionStorage;
    std::string _status;
    BarProp *_statusbar;
    BarProp *_toolbar;
    WindowProxy *_top;
    WindowProxy *_window;

    Window(emscripten::val v);
    virtual ~Window();
    static Window *create();
    static Window *create(emscripten::val v);
    void alert(std::string message);
    std::string atob(std::string atob);
    void blur();
    std::string btoa(std::string btoa);
    void cancelAnimationFrame(long handle);
    void clearInterval(long handle);
    void clearTimeout(long handle);
    void close();
    bool confirm(std::string message);
    Promise *createImageBitmap(HTMLImageElement *image, long sx, long sy, long sw, long sh);
    Promise *createImageBitmap(HTMLVideoElement *image, long sx, long sy, long sw, long sh);
    Promise *createImageBitmap(HTMLCanvasElement *image, long sx, long sy, long sw, long sh);
    Promise *createImageBitmap(Blob *image, long sx, long sy, long sw, long sh);
    Promise *createImageBitmap(ImageData *image, long sx, long sy, long sw, long sh);
    Promise *createImageBitmap(CanvasRenderingContext2D *image, long sx, long sy, long sw, long sh);
    Promise *createImageBitmap(ImageBitmap *image, long sx, long sy, long sw, long sh);
    void focus();
    CSSStyleDeclaration *getComputedStyle(Element *elt, std::string pseudoElt);
    WindowProxy *getter(void *indexName);
    WindowProxy *open(std::string url, std::string target, std::string features, bool replace);
    void postMessage(void *message, std::string targetOrigin, std::vector<Transferable *> transfer);
    void print();
    std::string prompt(std::string message, std::string _default);
    long requestAnimationFrame(std::function<void(double)> *callback);
    long setInterval(std::function<void(void)> handler, long timeout);
    long setTimeout(std::function<void(void)> handler, long timeout);
    void stop();
};
